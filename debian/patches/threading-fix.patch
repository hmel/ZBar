From: Bernd Zeimetz <bzed@debian.org>
Date: Tue, 24 Apr 2018 17:43:50 +0300
Subject: threading-fix

---
 python/processor.c | 49 +++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 41 insertions(+), 8 deletions(-)

diff --git a/python/processor.c b/python/processor.c
index c42d918..5c3c462 100644
--- a/python/processor.c
+++ b/python/processor.c
@@ -36,15 +36,24 @@ processor_new (PyTypeObject *type,
                PyObject *args,
                PyObject *kwds)
 {
-    static char *kwlist[] = { NULL };
-    if(!PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist))
+    static char *kwlist[] = { "enable_threads", NULL };
+    int threaded = -1;
+    if(!PyArg_ParseTupleAndKeywords(args, kwds, "|O&", kwlist,
+                                    object_to_bool, &threaded))
+        return(NULL);
+
+#ifndef WITH_THREAD
+    if(threaded > 0 &&
+       PyErr_WarnEx(NULL, "threading requested but not available", 1))
         return(NULL);
+    threaded = 0;
+#endif
 
     zbarProcessor *self = (zbarProcessor*)type->tp_alloc(type, 0);
     if(!self)
         return(NULL);
 
-    self->zproc = zbar_processor_create(0/*FIXME*/);
+    self->zproc = zbar_processor_create(threaded);
     zbar_processor_set_userdata(self->zproc, self);
     if(!self->zproc) {
         Py_DECREF(self);
@@ -228,7 +237,11 @@ processor_user_wait (zbarProcessor *self,
                                     object_to_timeout, &timeout))
         return(NULL);
 
-    int rc = zbar_processor_user_wait(self->zproc, timeout);
+    int rc = -1;
+    Py_BEGIN_ALLOW_THREADS
+    rc = zbar_processor_user_wait(self->zproc, timeout);
+    Py_END_ALLOW_THREADS
+
     if(rc < 0)
         return(zbarErr_Set((PyObject*)self));
     return(PyInt_FromLong(rc));
@@ -245,7 +258,11 @@ processor_process_one (zbarProcessor *self,
                                     object_to_timeout, &timeout))
         return(NULL);
 
-    int rc = zbar_process_one(self->zproc, timeout);
+    int rc = -1;
+    Py_BEGIN_ALLOW_THREADS
+    rc = zbar_process_one(self->zproc, timeout);
+    Py_END_ALLOW_THREADS
+
     if(rc < 0)
         return(zbarErr_Set((PyObject*)self));
     return(PyInt_FromLong(rc));
@@ -265,7 +282,11 @@ processor_process_image (zbarProcessor *self,
     if(zbarImage_validate(img))
         return(NULL);
 
-    int n = zbar_process_image(self->zproc, img->zimg);
+    int n = -1;
+    Py_BEGIN_ALLOW_THREADS
+    n = zbar_process_image(self->zproc, img->zimg);
+    Py_END_ALLOW_THREADS
+
     if(n < 0)
         return(zbarErr_Set((PyObject*)self));
     return(PyInt_FromLong(n));
@@ -275,6 +296,9 @@ void
 process_handler (zbar_image_t *zimg,
                  const void *userdata)
 {
+    PyGILState_STATE gstate;
+    gstate = PyGILState_Ensure();
+
     zbarProcessor *self = (zbarProcessor*)userdata;
     assert(self);
     assert(self->handler);
@@ -285,7 +309,7 @@ process_handler (zbar_image_t *zimg,
         img = zbarImage_FromImage(zimg);
         if(!img) {
             PyErr_NoMemory();
-            return;
+            goto done;
         }
     }
     else
@@ -299,8 +323,17 @@ process_handler (zbar_image_t *zimg,
     PyTuple_SET_ITEM(args, 2, self->closure);
 
     PyObject *junk = PyObject_Call(self->handler, args, NULL);
-    Py_XDECREF(junk);
+    if(junk)
+        Py_DECREF(junk);
+    else {
+        PySys_WriteStderr("in ZBar Processor data_handler:\n");
+        assert(PyErr_Occurred());
+        PyErr_Print();
+    }
     Py_DECREF(args);
+
+done:
+    PyGILState_Release(gstate);
 }
 
 static PyObject*
